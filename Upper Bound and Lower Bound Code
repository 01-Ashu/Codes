public class BinarySearch {
    
    // Find the lower bound (first occurrence) of a target in a sorted array
    public static int lowerBound(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;
        int result = -1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] == target) {
                result = mid;  // Found a match, but continue searching left
                right = mid - 1;
            } else if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return result;
    }
    
    // Find the upper bound (last occurrence) of a target in a sorted array
    public static int upperBound(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;
        int result = -1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (arr[mid] == target) {
                result = mid;  // Found a match, but continue searching right
                left = mid + 1;
            } else if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return result;
    }
    
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 3, 3, 4, 5, 6, 6, 7};
        int target = 3;
        
        int lower = lowerBound(arr, target);
        int upper = upperBound(arr, target);
        
        if (lower != -1) {
            System.out.println("Lower bound of " + target + " is at index: " + lower);
            System.out.println("Upper bound of " + target + " is at index: " + upper);
            System.out.println("Total occurrences: " + (upper - lower + 1));
        } else {
            System.out.println(target + " not found in the array");
        }
    }
}
